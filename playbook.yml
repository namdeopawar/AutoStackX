---
- hosts: all
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Install required packages
      apt:
        name: 
          - openjdk-17-jdk
          - nginx
          - postgresql
          - git
          - maven
          - nodejs
          - npm
        update_cache: yes
        state: present

    - name: Clone Spring Boot app from GitHub
      git:
        repo: 'https://github.com/namdeopawar/Simple-SpringBoot-ReactApp.git'
        dest: /opt/SpringBootReactApp
        version: main

    - name: Verify if frontend directory exists
      stat:
        path: /opt/SpringBootReactApp/frontend/package.json
      register: frontend_exists

    - name: Update PostgreSQL database configuration
      lineinfile:
        path: /opt/SpringBootReactApp/backend/src/main/resources/application.properties
        regexp: '^spring.datasource.url='
        line: 'spring.datasource.url=jdbc:postgresql://localhost:5432/testdb'
      notify: restart_postgresql

    - name: Update PostgreSQL username
      lineinfile:
        path: /opt/SpringBootReactApp/backend/src/main/resources/application.properties
        regexp: '^spring.datasource.username='
        line: 'spring.datasource.username=testuser'

    - name: Update PostgreSQL password
      lineinfile:
        path: /opt/SpringBootReactApp/backend/src/main/resources/application.properties
        regexp: '^spring.datasource.password='
        line: 'spring.datasource.password=TestPass123'

    - name: Create PostgreSQL database and user
      shell: |
        sudo -u postgres psql -c "CREATE DATABASE IF NOT EXISTS testdb;"
        sudo -u postgres psql -c "CREATE USER IF NOT EXISTS testuser WITH PASSWORD 'TestPass123';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;"
      ignore_errors: yes  # Ignore errors if the database/user already exists

    - name: Start Spring Boot backend
      shell: |
        cd /opt/SpringBootReactApp/backend
        ./mvnw spring-boot:run &
      async: 10  # Run the command asynchronously
      poll: 0    # Don't wait for the command to finish

    - name: Install frontend dependencies (only if frontend exists)
      shell: |
        cd /opt/SpringBootReactApp/frontend
        npm install
      when: frontend_exists.stat.exists

    - name: Build React application (only if frontend exists)
      shell: |
        cd /opt/SpringBootReactApp/frontend
        npm run build
      when: frontend_exists.stat.exists

    - name: Deploy React frontend (only if frontend exists)
      command: cp -r /opt/SpringBootReactApp/frontend/build/* /var/www/html/myweb/
      when: frontend_exists.stat.exists

    - name: Configure Nginx
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/myapp

    - name: Enable Nginx configuration
      command: ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp
      args:
        removes: /etc/nginx/sites-enabled/myapp

    - name: Test Nginx configuration
      command: nginx -t

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

  handlers:
    - name: restart_postgresql
      service:
        name: postgresql
        state: restarted
